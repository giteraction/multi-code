phone_book=["119", "97674223", "1195524421"]
dict={}
for i in range(len(phone_book)):
        dict[phone_book[i]]=len(phone_book[i])
        a=min(dict,key=dict.get)
        del dict[a]
if a in phone_book:
    return false
else:
    return true



def solution(phone_book):
    dict={}
    for i in range(len(phone_book)):
            dict[phone_book[i]]=len(phone_book[i])
    a=min(dict,key=dict.get)
    
    li=[]
    li2=[]
    c=1
    for i in range(len(phone_book)):
        li.append(list(phone_book[i]))
    li.remove(list(a))
    
    for i in range(len(li)):
        b=li[i][0:len(list(a))]
        if list(a) == b:
            li2.append(0)
        else:
            li2.append(1)
        c=c*li2[i]
    if c==0:
        return False
    else:
        return True

참고
phone_book=["119", "97674223", "1195524421"]
def solution(phone_book):
    answer = True
    hash_map = {}
    for phone_number in phone_book:
        hash_map[phone_number] = 1
    for phone_number in phone_book:
        temp = ""
        for number in phone_number:
            temp += number
            if temp in hash_map and temp != phone_number:
                answer = False
    return answer
solution(phone_book)

#정렬 가장큰수
#시간초과
from itertools import permutations
numbers=[6, 10, 2]
def solution(numbers):
    li2=[]
    
    li=list(permutations(numbers, len(numbers)))
    for i in range(len(li)):
        a=''
        for j in range(len(li[i])):
          a+=str(li[i][j])
        li2.append(int(a))
        
    return str(max(li2))
    
solution(numbers)

def solution(numbers):
    #0. key point
    numbers_str = [str(num) for num in numbers]                 #1. 사전 값으로 정렬하기
    numbers_str.sort(key=lambda num: num*3, reverse=True)       #2. number는 1000이하의 숫자이므로 x3(반복)한 값으로 비교

    return str(int(''.join(numbers_str)))