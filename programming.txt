phone_book=["119", "97674223", "1195524421"]
dict={}
for i in range(len(phone_book)):
        dict[phone_book[i]]=len(phone_book[i])
        a=min(dict,key=dict.get)
        del dict[a]
if a in phone_book:
    return false
else:
    return true



def solution(phone_book):
    dict={}
    for i in range(len(phone_book)):
            dict[phone_book[i]]=len(phone_book[i])
    a=min(dict,key=dict.get)
    
    li=[]
    li2=[]
    c=1
    for i in range(len(phone_book)):
        li.append(list(phone_book[i]))
    li.remove(list(a))
    
    for i in range(len(li)):
        b=li[i][0:len(list(a))]
        if list(a) == b:
            li2.append(0)
        else:
            li2.append(1)
        c=c*li2[i]
    if c==0:
        return False
    else:
        return True

참고
phone_book=["119", "97674223", "1195524421"]
def solution(phone_book):
    answer = True
    hash_map = {}
    for phone_number in phone_book:
        hash_map[phone_number] = 1
    for phone_number in phone_book:
        temp = ""
        for number in phone_number:
            temp += number
            if temp in hash_map and temp != phone_number:
                answer = False
    return answer
solution(phone_book)

#정렬 가장큰수
#시간초과
from itertools import permutations
numbers=[6, 10, 2]
def solution(numbers):
    li2=[]
    
    li=list(permutations(numbers, len(numbers)))
    for i in range(len(li)):
        a=''
        for j in range(len(li[i])):
          a+=str(li[i][j])
        li2.append(int(a))
        
    return str(max(li2))
    
solution(numbers)

def solution(numbers):
    #0. key point
    numbers_str = [str(num) for num in numbers]                 #1. 사전 값으로 정렬하기
    numbers_str.sort(key=lambda num: num*3, reverse=True)       #2. number는 1000이하의 숫자이므로 x3(반복)한 값으로 비교

    return str(int(''.join(numbers_str)))

#수박수
def solution(n):
    a='수'
    b='박'
    answer=''
    for i in range(n):
        if i%2==0:
            answer +=a
        elif i%2==1:
            answer +=b
    return answer
solution(3)

# 파이썬 숫자를 리스트로 바꾸기
[int(c) for c in str(n)]

# while 문 
def collatz(num):
    answer = 0
    while num!=1:
        if num%2==0:
            num=num/2
        else:
            num=3*num+1
        answer=answer+1

        if answer>=500:
            return -1

    return answer

#이상한 문자 만들기

s="try hello world"
def solution(s):
    a=s.split()
    c=''
    for i in range(len(a)):
        b=list(a[i])
        c+=' '
        for j in range(len(b)):
            if j%2==0:
                c+=b[j].upper()
            else:c+=b[j]
    c=list(c)
    c=c[1:len(c)]
    d=''
    for i in range(len(c)):
        d+=c[i]
    return d
solution(s)
#마지막만 안띄우게하는게 요점
s="try hello world"
def toWeirdCase(s):
    a=[]
    s=s.split(" ")
    for i in range(len(s)):
        for j in range(len(s[i])):
            if j%2==0:
                a.append(s[i][j].upper())
            else:
                a.append(s[i][j].lower())
        a.append(" ")

    c="".join(a[:-1])
    return c
toWeirdCase(s)

#시저암호

def solution(s, n):
    li=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
    li2=[]
    for i in range(len(li)):
        li2.append(li[i].upper())
    li3=list(s)
    word=''
    for i in range(len(li3)):
        
        if li3[i].isupper():
            num=li2.index(li3[i])+n
            if num>25:
                num=num-26
            word+=li2[num]
        
        elif li3[i].islower():
            num=li.index(li3[i])+n
            if num>25:
                num=num-26
            word+=li[num]
        else:
            word+=' '
                    
    return word
solution('a B z', 4)

#문자열 다루기 기본
def solution(s):
    if len(s)==4 or len(s)==6:
        for i in s:
            if ord(i)>=97:
                return False
            else: 
                return True
    else:
        return False
            
solution('a234')

#return sorted([s for s in strings],key = lambda a:[a[n],a]) 
#이렇게 람다식을 변경하시면 해결됩니다. n번째 문자를 우선적으로 처리하고 그 다음 나머지를 처리하는 방식입니다